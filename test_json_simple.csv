id,prompt,source
1,"Design a Mojo compiler optimization pass that performs aggressive loop vectorization with MLIR integration, automatic SIMD width detection, polyhedral analysis for loop fusion opportunities, and generates optimal assembly for both x86 AVX-512 and ARM SVE architectures with runtime dispatch",test_prompts_simple.json
2,"Implement a production-grade lock-free arena allocator in Zig with thread-local caching, automatic slab size selection based on allocation patterns, comptime memory layout optimization, zero-overhead debug tracking, and NUMA-aware allocation strategies for multi-socket systems",test_prompts_simple.json
3,"Build a complete deep learning inference engine in Mojo using MAX with custom CUDA/Metal kernels, dynamic batching for variable-length sequences, INT4/INT8 quantization with per-channel scaling, KV-cache optimization for transformer models, and speculative decoding for 3x throughput gains",test_prompts_simple.json
4,"Create a zero-allocation async runtime in Zig with io_uring for Linux, kqueue for BSD/macOS, completion ports for Windows, work-stealing scheduler with automatic thread pool sizing, structured concurrency primitives, and sub-microsecond task switching overhead",test_prompts_simple.json
5,"Architect a JIT compiler in Mojo that compiles Python bytecode to native machine code at runtime, performs type specialization based on profiling data, implements inline caching for polymorphic call sites, generates SSE/AVX intrinsics for numeric operations, and achieves performance within 2x of hand-written C++",test_prompts_simple.json
